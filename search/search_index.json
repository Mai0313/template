{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>"},{"location":"#repotemplate","title":"RepoTemplate","text":"<p>A clean template to kickstart your deep learning project \ud83d\ude80\u26a1\ud83d\udd25 Click on Use this template to initialize new repository.</p> <p>Suggestions are always welcome!</p>"},{"location":"#description","title":"Description","text":"<p>This is a template for you to use for any project. It has all the actions set up for you to use.</p>"},{"location":"#contributors","title":"Contributors","text":"<p>Made with contrib.rocks</p>"},{"location":"#for-more-info-check-the-docs","title":"For More info, check the Docs","text":""},{"location":"Reference/repo_template/hello/","title":"Hello","text":""},{"location":"Reference/repo_template/hello/#src.repo_template.hello.Response","title":"Response","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"Reference/repo_template/hello/#src.repo_template.hello.Response.name","title":"name","text":"<pre><code>name: str = Field(\n    ...,\n    title=\"Name\",\n    description=\"The name of the response.\",\n    validation_alias=AliasChoices(\"name\", \"Name\"),\n    frozen=False,\n    deprecated=False,\n)\n</code></pre>"},{"location":"Reference/repo_template/hello/#src.repo_template.hello.Response.content","title":"content","text":"<pre><code>content: str = Field(\n    ...,\n    title=\"Content\",\n    description=\"The content of the response.\",\n    validation_alias=AliasChoices(\"content\", \"Content\"),\n    frozen=False,\n    deprecated=False,\n)\n</code></pre>"},{"location":"Scripts/gen_docs/","title":"Gen docs","text":""},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator","title":"DocsGenerator","text":"<p>               Bases: <code>BaseModel</code></p> <p>DocsGenerator is a class that generates documentation for Python files or classes within a specified source directory.</p> <p>Attributes:</p> Name Type Description <code>source</code> <code>str</code> <p>The source directory or file path.</p> <code>output</code> <code>str</code> <p>The output directory path.</p> <code>exclude</code> <code>str</code> <p>Comma-separated list of folders or files to exclude.</p> <code>mode</code> <code>Literal['file', 'class']</code> <p>Mode of documentation generation, either by file or class.</p> <p>Methods:</p> Name Description <code>gen_docs</code> <p>Generates documentation by file or class.</p> <code>__call__</code> <p>Asynchronously calls the gen_docs method.</p> <p>Examples:</p> Using CLIUsing uv <pre><code>python ./scripts/gen_docs.py --source ./src --output ./docs/Reference --exclude .venv gen_docs\n</code></pre> <pre><code>uv run python ./scripts/gen_docs.py\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.source_path","title":"source_path","text":"<pre><code>source_path: Path = Field(\n    ...,\n    title=\"The Source File Path or Folder Path\",\n    description=\"This field can be a file path or folder path, if it is a folder path, it will automatically search for python and ipynb files.\",\n    examples=[\"./src\"],\n    alias=\"source\",\n    frozen=True,\n)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.output_path","title":"output_path","text":"<pre><code>output_path: Path = Field(\n    ...,\n    title=\"The Output Path\",\n    description=\"The output path for the generated documentation.\",\n    examples=[\"./docs/Reference\"],\n    alias=\"output\",\n    frozen=True,\n)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.exclude","title":"exclude","text":"<pre><code>exclude: str = Field(\n    default=\".venv\",\n    description=\"Exclude the folder or file, it should be separated by comma.\",\n    examples=[\".venv,.git,.idea\"],\n)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.mode","title":"mode","text":"<pre><code>mode: Literal[\"file\", \"class\"] = Field(\n    default=\"class\",\n    title=\"The Document Style\",\n    description=\"Generate docs by file or class.\",\n    examples=[\"file\", \"class\"],\n)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.execute","title":"execute","text":"<pre><code>execute: bool = Field(\n    default=False,\n    title=\"Execute Notebook\",\n    description=\"Execute the notebook before generating the documentation.\",\n    examples=[\"True\", \"False\"],\n)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.concurrency","title":"concurrency","text":"<pre><code>concurrency: int = Field(\n    default=10,\n    title=\"Concurrency Limit\",\n    description=\"Maximum number of files to process concurrently.\",\n    examples=[5, 10, 20],\n)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.source_files","title":"source_files","text":"<pre><code>source_files: list[Path]\n</code></pre> <p>Computed property that returns the source path as a Path object.</p> <p>Returns:</p> Name Type Description <code>Path</code> <code>list[Path]</code> <p>The source path.</p>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.gen_docs","title":"gen_docs","text":"<pre><code>gen_docs() -&gt; None\n</code></pre> Source code in <code>scripts/gen_docs.py</code> <pre><code>async def gen_docs(self) -&gt; None:\n    with Progress() as progress:\n        total_files = len(self.source_files)\n        task = progress.add_task(f\"[green]Generating {total_files}...\", total=total_files)\n\n        if not self.source_files:\n            console.log(\"[yellow]No files found to process\")\n            return\n\n        # Process all files concurrently with controlled concurrency\n        results = await self._process_batch(self.source_files, progress, task)\n\n        # Summarize results\n        successful = len([r for r in results if r])\n    console.log(\n        f\"[green]Documentation generation complete ({successful}/{total_files})!\",\n        highlight=True,\n    )\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/10/06/this-is-an-example-post-for-blog/","title":"This is an example post for blog","text":"<p>This is an simple example post for blog.</p>"},{"location":"installation/","title":"Installation","text":"<p>This page will guide you through the installation process this project.</p>"},{"location":"installation/#install-dependency-management-tool","title":"Install Dependency Management Tool","text":"uvRyeConda <p>More information about uv</p> MacOS / LinuxWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>More information about rye</p> MacOS / LinuxWindows <pre><code>curl -sSf https://rye.astral.sh/get | bash\n</code></pre> <pre><code>wget https://github.com/astral-sh/rye/releases/latest/download/rye-x86_64-windows.exe\n.\\rye-x86_64-windows.exe\n</code></pre> <p>More information about miniconda</p> LinuxMacOSWindows <pre><code>mkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm ~/miniconda3/miniconda.sh\n</code></pre> Apple SiliconIntel <pre><code>mkdir -p ~/miniconda3\ncurl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh -o ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm ~/miniconda3/miniconda.sh\n</code></pre> <pre><code>mkdir -p ~/miniconda3\ncurl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -o ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm ~/miniconda3/miniconda.sh\n</code></pre> <pre><code>wget \"https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe\" -outfile \".\\miniconda.exe\"\nStart-Process -FilePath \".\\miniconda.exe\" -ArgumentList \"/S\" -Wait\ndel .\\miniconda.exe\n</code></pre>"},{"location":"installation/#installsetup-dependencies","title":"Install/Setup Dependencies","text":"uvRyeConda <pre><code>uv sync\n</code></pre> <pre><code>rye sync\n</code></pre> <pre><code>conda create -n repo_template python=3.10 -y\nconda activate repo_template\nconda install uv\nuv pip sync pyproject.toml\n</code></pre> <ul> <li>Once you have done the above steps, you can run the following commands to start the application.</li> <li>If your environment is messed up, you can run <code>uv sync</code> again to fix it.</li> </ul>"},{"location":"Development/coverage/","title":"Coverage","text":""}]}